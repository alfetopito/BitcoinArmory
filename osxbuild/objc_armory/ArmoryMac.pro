# The qmake project file used to build the Mac-specific Objective-C++ code into
# a framework to be loaded by Armory for tasks that can performed only by using
# Objective-C code. Parameters have been culled from multiple sources. Wherever
# appropriate, comments will be included to indicate where the parameters came
# from in case things change after software upgrades.

# Note that you MUST run SIP before executing the Makefile! SIP generates some
# CPP/H files that have to be compiled. qmake really can't handle SIP properly,
# so we must run it separately. (The best that qmake can do is to have
# QMAKE_EXTRA_COMPILERS build a phony file that's actually a SIP proxy. This
# generates warnings when qmake is run because the files generated by SIP don't
# exist yet. This will work but is bad form.)

# After a long back-and-forth, it was decided to basically copy what PyQt does
# whenever it uses qmake to build and install shared libraries. Some of this may
# not be strictly required, but hey, if it ain't broke....
QTVER = 4.8.6
SIPVER = 4.16.2
PYVER = 2.7.8
QT_UNPACK_BASE = ../workspace/unpackandbuild/qt-everywhere-opensource-src-$${QTVER}
SIP_UNPACK_BASE = ../workspace/unpackandbuild/sip-$${SIPVER}
PYTHON_UNPACK_BASE = ../workspace/unpackandbuild/Python-$${PYVER}
TEMPLATE = lib
CONFIG += plugin warn_on release
PY_MODULE = ArmoryMac.so
target.files = ArmoryMac.so
target.CONFIG = no_check_exist
target.path = .
INSTALLS += target
sip.path = .
sip.files = ./ArmoryMac.sip
INSTALLS += sip
QMAKE_CXXFLAGS += -fno-exceptions
DEFINES += SIP_PROTECTED_IS_PUBLIC protected=public
INCLUDEPATH = $$QT_UNPACK_BASE/mkspecs/unsupported/macx-clang . $$QT_UNPACK_BASE/include/QtCore $$QT_UNPACK_BASE/include $$QT_UNPACK_BASE/include/QtGui .rcc/release-shared .moc $$SIP_UNPACK_BASE/siplib $$PYTHON_UNPACK_BASE/Include $$PYTHON_UNPACK_BASE/Mac/Include $$PYTHON_UNPACK_BASE
QMAKE_LFLAGS += "-undefined dynamic_lookup"

# Handle the Objective-C++ files. This will include executing moc on the
# ArmoryMac.h file, creating a resultant CPP file, and compiling the CPP file.
# (Such a step is critical for getting the shared library to work properly.)
# Because we support 10.7+, it's safe to assume we can use SSSE3 instructions.
# Source: http://stackoverflow.com/questions/2355056/how-to-mix-qt-c-and-obj-c-cocoa
# Source: http://el-tramo.be/blog/mixing-cocoa-and-qt
# Source: http://stackoverflow.com/questions/18768219/sdl-framework-include-on-macos-qt
QMAKE_OBJECTIVE_CFLAGS += -pipe -Xarch_x86_64 -mmacosx-version-min=10.7 -O2 -arch x86_64 -mssse3 -Wall -W -fPIC
OBJECTIVE_SOURCES += macdockiconhandler.mm macnotificationhandler.mm
HEADERS += ./ArmoryMac.h
LIBS += -framework Foundation

# General flags and files, some of which were borrowed from the Qt Makefiles.
# This also includes moving the resultant library (.dylib) to DESTDIR and
# and renaming it (.so) via QMAKE_POST_LINK.
# Source: http://qt-project.org/doc/qt-4.8/qmake-variable-reference.html
# Source: http://qtcenter.org/wiki/index.php?title=Undocumented_qmake
# Source: src/gui/Makefile.release for Qt
# Source: QtCore/QtCore.pro for PyQt
QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.7
ARMORYNAME = ArmoryMac
DESTDIR = ../workspace/Armory.app/Contents/MacOS/py/usr/lib/armory
SOURCES = ./sip$${ARMORYNAME}DockIconClickEventHandler.cpp ./sip$${ARMORYNAME}MacDockIconHandler.cpp ./sip$${ARMORYNAME}MacNotificationHandler.cpp ./sip$${ARMORYNAME}cmodule.cpp
LIBS += -L$$QT_UNPACK_BASE/lib -framework QtCore -framework QtGui -L$$QT_UNPACK_BASE/lib -framework Carbon -lz -framework AppKit -framework Python
QMAKE_LFLAGS += -Xarch_x86_64 -mmacosx-version-min=10.7
QMAKE_CXXFLAGS += $$QMAKE_OBJECTIVE_CFLAGS
DEFINES += QT_SHARED QT_BUILD_GUI_LIB QT_NO_USING_NAMESPACE QT_NO_CAST_TO_ASCII QT_ASCII_CAST_WARNINGS QT_MOC_COMPAT QT_USE_QSTRINGBUILDER QT_USE_BUNDLED_LIBPNG PNG_NO_ASSEMBLER_CODE QT_NO_CUPS QT_NO_LPR QT_NO_OPENTYPE QT_NO_STYLE_WINDOWSVISTA QT_NO_STYLE_WINDOWSXP QT_NO_STYLE_GTK QT_NO_STYLE_WINDOWSCE QT_NO_STYLE_WINDOWSMOBILE QT_NO_STYLE_S60 Q_INTERNAL_QAPP_SRC QT_NO_DEBUG QT_CORE_LIB QT_HAVE_MMX QT_HAVE_SSE QT_HAVE_MMXEXT QT_HAVE_SSE2 QT_HAVE_SSE3 QT_HAVE_SSSE3 _LARGEFILE64_SOURCE _LARGEFILE_SOURCE
QMAKE_CLEAN += ./sip* ./moc_* $$DESTDIR/$${ARMORYNAME}.so
QMAKE_POST_LINK = mv $$DESTDIR/$(TARGET) $$DESTDIR/$${ARMORYNAME}.so
